* Beweis von Programmeigenschaften
#+BEGIN_SRC haskell
swap :: (a,b) -> (b,a)
swap (x, y) = (y, x)
#+END_SRC

Zu zeigen:  für alle x::a, y::b gilt swap (swap (x,y)) = (x,y)

Beweis: swap (swap (x,y)) = swap (y,x) = (x,y)

* Induktion auf Listen
** Definition
  Gilt
  - P([]) und
  - für jedes xs::[a] mit P(xs) auch P(x:xs), wobei x::a beliebig,
  dann gilt P(xs) für *alle* Listen xs::[a].
** Intuition
   P([])
   ⇒ P(x:[])
   ⇒ P(y:x:[]) = P([y,x])
   ⇒ ⋯
** Induktion auf ℕ
   Nun natürlich Eigenschaft P : ℕ → {0, 1}

   Gilt 
   - P(0) und
   - für jedes n ∈ ℕ mit P(n) auch P(n+1),
   dann gilt P(n) für *alle* n ∈ ℕ.

*** Verhältnis zu Induktion auf [a]:
	Wir nehmen einen Dummy-Typ, z.B. data A = A

	Dann entspricht die Liste xs = [A, ..., A] der Zahl (length xs)
** double und sumList
   ZZ: fuer alle xs :: [Int] gilt sumList (double xs) = 2 * sumList xs

   IB: sumList (double []) = sumList []
                           = 0
						   = 2 * 0
						   = 2 * sumList []

   IS: Sei xs :: [Int] so dass: sumList (double xs) = 2 * sumList xs (IH)

       Sei x :: Int.  ZZ: sumList (double (x:xs)) = 2 * sumList (x:xs)

	   sumList (double (x:xs)) = sumList ((2*x) : double xs)
	                           = 2*x + sumList (double xs)
							   = 2*x + 2 * sumList xs
							   = 2 * (x + sumList xs)
							   = 2 * sumList (x:xs)
** Schwieriges Beispiel
   #+BEGIN_SRC haskell
   iSort :: [Int] -> [Int]
   iSort [] = []
   iSort (x : xs) = ins x (iSort xs)

   ins :: Int -> [Int] -> [Int]
   ins x [] = [x]
   ins x (y : ys)
     | x <= y = x : y : ys
     | otherwise = y : ins x ys

   (++) :: [a] -> [a] -> [a]
   [] ++ ys     = ys
   (x:xs) ++ ys = x : (xs ++ ys)
   #+END_SRC

*** Zu HB3
	x = 7 in xs = [1,3,4,8,9,10]:
	Dann also ys = [1,3,4] und zs = [8,9,10]
	und ins x xs = ys ++ [x] ++ zs

** rev
   ZZ: für alle xs :: [a] gilt rev (rev xs) = xs

   IB: ZZ: rev (rev []) = []

   	#+BEGIN_SRC haskell
	rev (rev []) = rev [] = []
    #+END_SRC

   IS: Sei xs :: [a] so dass rev (rev xs) = xs

       Sei x::a.  ZZ: rev (rev (x:xs)) = x:xs

	   #+BEGIN_SRC haskell
	   rev (rev (x:xs)) = rev (rev xs ++ [x])
	                    = x : rev (rev xs)      (*)
						= x : xs                (IH)
       #+END_SRC

*** Hilfseigenschaft
	für alle x::a, xs :: [a] gilt rev (xs ++ [x]) = x : rev xs   (*)

	IB: Sei x::a.

		#+BEGIN_SRC haskell
	    rev ([] ++ [x]) = rev [x]
                        = rev [] ++ [x]
						= [] ++ [x]
						= [x]
						= x : []
						= x : rev []
		#+END_SRC

	IS: Sei xs :: [a] so dass fuer alle x::a gilt: rev (xs ++ [x]) = x : rev xs

	    Sei y::a.  ZZ: fuer alle x::a gilt: rev ((y:xs) ++ [x]) = x : rev (y:xs)

		#+BEGIN_SRC haskell
		rev ((y:xs) ++ [x]) = rev (y : (xs ++ [x]))
                            = rev (xs ++ [x]) ++ [y]
							= (x : rev xs) ++ [y]
							= x : (rev xs ++ [y])
							= x : rev (y : xs)
		#+END_SRC
	
* Induktion auf algebraischen Datentypen
** Definition
   Wenn
   - (Induktionsanfang:) für jeden k-stelligen Konstruktor D
     von T, für den kein Argumenttyp gleich T ist, das Prädikat P gilt und
   - (Induktionsschritt:) folgende Implikation für jeden k-stelligen Konstruktor C mit Ergebnistyp T mit
     k ≥ 1 und alle Werte t1, ... , tk (vom passenden Argumenttyp) gilt:

	 wenn P für jedes tᵢ vom Typ T gilt (Induktionsvoraussetzung), dann gilt P für (C t₁ ... tₖ),

   dann gilt P für jeden Wert von T.

** Beispiele:
   #+BEGIN_SRC haskell
   data Tree a = Node a (Tree a) (Tree a) | Leaf a
   #+END_SRC

   #+BEGIN_SRC haskell
   data Weird a = Node2 a (Weird a) (Weird a) | Node3 a (Weird a) (Weird a) (Weird a) | WLeaf a | OtherLeaf Int 
   #+END_SRC   

** Verhältnis zu Induktion auf [a]
   #+BEGIN_SRC haskell
   data List a = Cons a (List a) | Nil
   #+END_SRC

** Beispiel
   #+BEGIN_SRC haskell
   map :: (a -> a) -> [a] -> [a]
   map f []       = []
   map f (x : xs) = f x : map f xs
   
   data Tree a = Nil | Node a (Tree a) (Tree a)
   
   mapTree :: (a -> a) -> Tree a -> Tree a
   mapTree f Nil            = Nil
   mapTree f (Node x t1 t2) = Node (f x) (mapTree f t1) (mapTree f t2)
   
   collapse :: Tree a -> [a]
   collapse Nil            = []
   collapse (Node x t1 t2) = collapse t1 ++ [x] ++ collapse t2
   #+END_SRC
   
ZZ: fuer alle f :: a -> a, t :: Tree a gilt: map f (collapse t) = collapse (mapTree f t)

IB: Sei f :: a->a.  ZZ: map f (collapse Nil) = collapse (mapTree f Nil)

#+BEGIN_SRC haskell
map f (collapse Nil) = map f []
                     = []
					 = collapse Nil
					 = collapse (mapTree f Nil)
#+END_SRC

IS: Sei l, r :: Tree a so dass
    - map f (collapse l) = collapse (mapTree f l)
    - map f (collapse r) = collapse (mapTree f r)

	Sei x :: a.  ZZ: map f (collapse (Node x l r)) = collapse (mapTree f (Node x l r))

	#+BEGIN_SRC haskell
	map f (collapse (Node x l r)) = map f (collapse l ++ [x] ++ collapse r)
	                              = map f (collapse l) ++ map f [x] ++ map f (collapse r)    (**)
								  = collapse (mapTree f l) ++ map f [x] ++ collapse (mapTree f r)
								  = collapse (mapTree f l) ++ map f (x:[]) ++ collapse (mapTree f r)
								  = collapse (mapTree f l) ++ (f x : []) ++ collapse (mapTree f r)
								  = collapse (mapTree f l) ++ [f x] ++ collapse (mapTree f r)
								  = collapse (Node (f x) (mapTree f l) (mapTree f r))
								  = collapse (mapTree f (Node x l r))
    #+END_SRC

*** Hilfsaussage:
	Sei xs, ys :: [a], f :: a->a.  Dann gilt: map f (xs ++ ys) = map f xs ++ map f ys   (**)
